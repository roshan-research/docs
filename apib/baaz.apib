FORMAT: 1A
HOST: https://baaz.roshan-ai.ir/

# باز
باز یک ای‌پی‌آی بومی برای جستجو در محتوای فارسی است. برای دسترسی به این ای‌پی‌آی به یک `TOKEN_KEY` نیاز دارید که می‌توانید با ارسال یک ایمیل به <a href="mailto:baaz@roshan-ai.ir">baaz@roshan-ai.ir</a> درخواست دهید.

## ایندکس [/{index_name}/index]
قبل از جستجو ابتدا باید داده‌ها را ایندکس کنید. این تابع محتوای شما را تحت شناسهٔ داده‌شده ایندکس می‌کند.

+ Parameters
    + index_name: `baaz` (required, string) - شناسهٔ ایندکس.

### ایندکس‌کردن محتوا [POST]
برای ایندکس‌کردن محتوا درخواست خود را با متد `POST` به‌همراه پارامتر `items` ارسال کنید. هر یک از عناصر آرایهٔ `items` بیانگر یک محتواست. هر محتوا دارای یک‌سری فیلدهای اجباری و یک‌سری فیلدهای اختیاری است. جدایی از این فیلدها می‌توانید فیلدهای خودتان را هم اضافه کنید. اگر محتوایی با `type` و `id` یکسان قبلاً ایندکس شده باشد جایگزین آن می‌شود.

+ Request (application/json)
 	+ Attributes
 	 	- type: movie (string, required) - نوع محتوا را مشخص می‌کند. درواقع هر `type` نمایندهٔ یک دسته از محتواست. مثلاً در نمونهٔ مقابل، مشخصات فیلم‌ها با تایپ ‍‍`movie` و مشخصات افراد با تایپ `person` ارسال شده است. این فیلد قابل جستجو نیست.
 	 	- id: 1 (number, required) - شناسهٔ محتواست که باید در سطح هر `type` منحصربه‌فرد باشد. اگر محتوایی با `type` و `id` یکسان ارسال شود جایگزین قبلی خواهد شد.
 	 	- title: ماجرای نیمروز (string, required) - عنوان محتواست که مهم‌ترین عامل در رتبه‌بندی نتایج جستجو است. در هنگام جستجو اگر هیچ فیلدی برای جستجو انتخاب نشود جستجو به صورت پیش‌فرض روی این فیلد صورت می‌گیرد.
 	 	- importance: 100 (number) - میزان اهمیت محتواست. هرچه این عدد بیشتر باشد جایگاه محتوا در نتایج جستجو بالاتر است. این فیلد قابل جستجو نیست و فقط روی ترتیب نتایج اثر می‌گذارد.
 	 	- time: 2017-07-08 10:30:00 (string) - تاریخ محتواست. هرچه این تاریخ جدیدتر باشد جایگاه محتوا در نتایج جستجو بالاتر است. این فیلد قابل جستجو نیست و فقط روی ترتیب نتایج اثر می‌گذارد.
 	 	- labels: هیجانی, ماجراجویی (array[string]) - برای هر محتوایی می‌توانید برچسب‌هایی تعریف کنید. این فیلد قابل جستجو نیست و صرفاً برای محدودکردن نتایج کاربرد دارد.
 	 	- ...: ... (string) - به جز فیلدهای بالا هر فیلد دیگری می‌توانید تعریف کنید. این فیلدها قابل جستجو هستند و بعداً می‌توانید نتایج جستجو را بر اساس آن محدود کنید. فیلدهایی که اضافه می‌کنید فقط باید حاوی متن باشند. این فیلد می‌تواند یک **فیلد ساده حاوی متن** باشد مثل `director` یا یک **آرایهٔ حاوی مقادیر متنی** مثل `actors` یا یک **کلاس حاوی مقادیر متنی** مثل `data`.
 	+ Headers
 	 	 	Authorization: Token TOKEN_KEY
 	+ Body
 	 	 	{
 	 	 	 	"items": [
 	 	 	 	 	{
 	 	 	 	 	 	"type": "movie",
 	 	 	 	 	 	"id": 1,
 	 	 	 	 	 	"title": "ماجرای نیمروز",
 	 	 	 	 	 	"director": "محمدحسین مهدویان",
 	 	 	 	 	 	"actors": ["جواد عزتی", "هادی حجازی‌فر"],
 	 	 	 	 	 	"labels": ["هیجانی", "ماجراجویی"],
 	 	 	 	 	 	"importance": 100,
 	 	 	 	 	 	"data": {"url": "https://www.filimo.com/m/czWum"}
 	 	 	 	 	},
 	 	 	 	 	{
 	 	 	 	 	 	"type": "movie",
 	 	 	 	 	 	"id": 2,
 	 	 	 	 	 	"title": "ایستاده در غبار",
 	 	 	 	 	 	"director": "محمدحسین مهدویان",
 	 	 	 	 	 	"labels": ["هیجانی", "جنگی"],
 	 	 	 	 	 	"importance": 50,
 	 	 	 	 	 	"data": {"url": "https://www.filimo.com/m/fsa4n"}
 	 	 	 	 	},
 	 	 	 	 	{
 	 	 	 	 	 	"type": "person",
 	 	 	 	 	 	"id": 1,
 	 	 	 	 	 	"title": "ابراهیم حاتمی‌کیا",
 	 	 	 	 	 	"data": {"url": "https://www.filimo.com/crew/ابراهیم_حاتمی_کیا"}
 	 	 	 	 	}
 	 	 	 	]
 	 	 	}
+ Response 200 (application/json)
 	+ Body
 	 	 	{
 	 	 	 	"ids": [1, 2, 1]
 	 	 	}

### ویرایش محتوای ایندکس [PUT]
برای ویرایش محتوای یک ایندکس درخواست خود را با متد `PUT` ارسال کنید و در بدنهٔ درخواست، آرایهٔ `items` را به‌همراه فیلدهایی که می‌خواهید مقدارشان تغییر کند ضمیمه کنید. در هر محتوا واردکردن دو فیلد `type` و `id` برای یافتن محتوا ضروری است. به‌جز این‌ها هر فیلد دیگری وارد کنید مقدار آن‌ها ویرایش می‌شود. بقیهٔ فیلدهایی که وارد نکرده‌اید دست‌نخورده باقی می‌ماند. مثلاً در نمونهٔ مقابل، محتوایی با تایپ movie و شناسهٔ ۱ در ایندکس جستجو می‌شود و مقدار فیلد importance آن به ۲۰۰ تغییر می‌کند.

+ Request (application/json)
 	+ Headers
 	 	 	Authorization: Token TOKEN_KEY
 	+ Body
 	 	 	{
 	 	 	 	"items": [
 	 	 	 	 	{
 	 	 	 	 	 	"type": "movie",
 	 	 	 	 	 	"id": 1,
 	 	 	 	 	 	"importance": 200
 	 	 	 	 	}
 	 	 	 	]
 	 	 	}
+ Response 200 (application/json)
 	+ Body
 	 	 	{
 	 	 	 	"ids": [1]
 	 	 	}

### حذف محتوای ایندکس [DELETE]
برای حذف یک یا چند محتوا، درخواست خود را با متد `DELETE` ارسال کنید و در بدنهٔ درخواست دو پارامتر `type` و `ids` را مقداردهی کنید. با ارسال این درخواست آن دسته از محتواهایی که نوعشان برابر `type` است و شناسهٔ آن‌ها در آرایهٔ `ids` وجود دارد از ایندکس حذف می‌شود.  **گر هیچ پارامتری وارد نکنید کل ایندکس حذف می‌شود.** همچنین اگر در بدنه ی درخواست فقط پارامتر `type` وارد شود و `ids` وارد نشود همه ی محتواهایی با آن `type` حذف می‌شود.
+ Request (application/json)
 	+ Headers
 	 	 	Authorization: Token TOKEN_KEY
 	+ Body
 	 	 	{
 	 	 	 	"type": "movie",
 	 	 	 	"ids": [2]
 	 	 	}
+ Response 200 (application/json)
 	+ Body
 	 	 	{
 	 	 	 	"ids": [2]
 	 	 	}

## جستجوی معمولی با GET [/{index_name}/{types}/query{?fields,text,size,from}]
عبارتی را در یک ایندکس جستجو می‌کند. این تابع در صورت وجود اشتباه در عبارت جستجو منظور کاربر را حدس می‌زند و در پارامتر `didYouMean` حدس خود را برمی‌گرداند و برمبنای همین حدس، نتایج جستجو را باز می‌گرداند.

+ Parameters
 	+ index_name: `baaz` (required, string) - شناسهٔ ایندکسی که می‌خواهید در آن جستجو شود.
 	+ types: `movie|person` (required, string) - انواعی که می‌خواهید در آن‌ها جستجو شود. بیشتر از یک نوع را با کاراکتر خط عمودی `|` از هم جدا کنید.
 	+ text: `نیم‌روز` (required, string) - عبارت جستجو
 	+ fields: `title|director` (optional, string) - فیلد یا فیلدهایی که می‌خواهید در آن‌ها جستجو شود. بیشتر از یک فیلد را با کاراکتر خط عمودی `|` از هم جدا کنید. اگر هیچ فیلدی وارد نکنید جستجو به‌طور‌ پیش‌فرض در فیلد `Title` صورت می‌گیرد.
 	+ size: `10` (optional, number) - تعداد نتایج جستجو را مشخص می‌کند. این پارامتر اختیاری است و اگر ارسال نکنید کل نتایج جستجو نمایش داده می‌شود.
 	+ from: `0` (optional, number) - بعد از ارسال درخواستِ جستجو، آرایه‌ای از نتایج بازگردانده می‌شود. با تنظیم پارمتر `from` بیان می‌کنید که نتایج از کدام شماره بازگردد؛ مثلاً ۰ یعنی از ابتدا همه را نشان بده. ۲ یعنی از سومین عنصر به بعد نشان بده. این پارامتر نیز همانند `size` اختیاری است و مقدار پیش‌فرض آن ۰ است یعنی همهٔ نتایج نشان داده می‌شود.

### مثال [GET]
خروجی مقابل در پاسخ به این درخواست است:

`http://api.sobhe.ir:7000/index1/movie/query?text=نیم‌روز&fields=title&size=2&from=0`

عبارت `نیم‌روز` در فیلد `title` تمام آیتم‌های موجود در `index1` که تایپ آن `movie` است جستجو می‌شود و نتایج از آیتم شمارهٔ `۰` به‌بعد و به تعداد `۲` عدد بازمی‌گردد. در مثال مقابل چون فقط یک نتیجه وجود داشته همان یک نتیجه بازگردانده شده است.

+ Response 200 (application/json)
    {
        "items": [
            {
                "_score": 9.680344,
                "highlight": {
                    "title": [
                        "ماجرای <em>نیمروز</em>"
                    ]
                },
                "id": "1",
                "title": "ماجرای نیمروز",
                "labels": [
                    "هیجانی",
                    "ماجراجویی"
                ],
                "importance": 100,
                "type": "movie"
            }
        ],
        "didYouMean": "<em>نیمروز</em>"
    }

## جستجوی معمولی با POST [/{index_name}/{types}/query]
این روش جستجو همانند جستجو معمولی با GET است با این تفاوت که پارامترها به صورتی که می‌بینید در بدنهٔ درخواست ارسال می‌شود.

### مثال [POST]
خروجی مقابل در پاسخ به این درخواست است:

`http://api.sobhe.ir:7000/index1/movie/query`

عبارت `نیم‌روز` در فیلد `title` تمام آیتم‌های موجود در `index1` که تایپ آن `movie` است جستجو می‌شود و نتایج از آیتم شمارهٔ `۰` به‌بعد و به تعداد `۲` عدد بازمی‌گردد. در مثال مقابل چون فقط یک نتیجه وجود داشته همان یک نتیجه بازگردانده شده است.

+ Request (application/json)
  + Body
      {
        "text": "نیم‌روز",
        "fields": ["title"],
        "size": 2,
        "from": 0
      }

+ Response 200 (application/json)
    {
        "items": [
            {
                "_score": 9.680344,
                "highlight": {
                    "title": [
                        "ماجرای <em>نیمروز</em>"
                    ]
                },
                "id": "1",
                "title": "ماجرای نیمروز",
                "labels": [
                    "هیجانی",
                    "ماجراجویی"
                ],
                "importance": 100,
                "type": "movie"
            }
        ],
        "didYouMean": "<em>نیمروز</em>"
    }

## جستجوی درلحظه‌ [/{index_name}/{types}/complete{?text,size,from}]
این تابع همزمان همزمان با نوشتنِ کاربر جستجو می‌کند و دو تفاوت مهم با <a href="#5a91792863">جستجوی معمولی</a> دارد. اولاً فقط در فیلد title جستجو می‌کند و دوماً اگر بخشی از کلمه نیز در فیلد title وجود داشته باشد به عنوان نتیجه بازمی‌گرداند. به‌عنوان مثال در نمونه‌درخواست مقابل با جستجوی «ماجر»، فیلم «ماجرای نیمروز» جزو یکی از نتایج است. دقت کنید این تابع جستجو را فقط از ابتدای کلمه انجام می‌دهد. یعنی مثلاً‌ در نمونهٔ مقابل با جستجوی «ماجر»، «نیم» و «ماجرای نیمر» به نتایج مشابهی می‌رسید ولی جستجوی «جرای»، «روز» نتایجی در پی نخواهد داشت چون این‌ها بخشی از ابتدای کلمات نیست.

+ Parameters
 	+ index_name: `baaz` (required, string) - شناسهٔ ایندکسی که می‌خواهید در آن جستجو شود.
 	+ types: `movie|person` (required, string) - انواعی که می‌خواهید در آن‌ها جستجو شود. بیشتر از یک نوع را با کاراکتر خط عمودی `|` از هم جدا کنید.
 	+ text: `نیم‌روز` (required, string) - عبارت جستجو
 	+ size: `10` (optional, number) - تعداد نتایج جستجو را مشخص می‌کند. این پارامتر اختیاری است و اگر ارسال نکنید کل نتایج جستجو نمایش داده می‌شود.
 	+ from: `0` (optional, number) - بعد از ارسال درخواستِ جستجو، آرایه‌ای از نتایج بازگردانده می‌شود. با تنظیم پارمتر `from` بیان می‌کنید که نتایج از کدام شماره بازگردد؛ مثلاً ۰ یعنی از ابتدا همه را نشان بده. ۲ یعنی از سومین عنصر به بعد نشان بده. این پارامتر نیز همانند `size` اختیاری است و مقدار پیش‌فرض آن ۰ است یعنی همهٔ نتایج نشان داده می‌شود.

### مثال [GET]
+ Response 200 (application/json)
    {
        "items": [
            {
                "_score": 3.3929849,
                "highlight": {
                    "title": [
                        "<em>ماجرای</em> نیمروز"
                    ]
                },
                "id": "1",
                "type": "movie",
                "title": "ماجرای نیمروز",
                "labels": [
                    "هیجانی",
                    "ماجراجویی"
                ],
                "importance": 100
            }
        ]
    }

## ‌پیشنهاد جستجو [/{index_name}/{types}/suggest{?text}]
این تابع همزمان با جستجوی کاربر، با بررسی تاریخچهٔ جستجوهای قبلی، عبارات مناسبی برای جستجو پیشنهاد می‌دهد.

+ Parameters
 	+ index_name: `baaz` (required, string) - شناسهٔ ایندکسی که می‌خواهید در آن جستجو شود.
 	+ types: `movie|person` (required, string) - انواعی که می‌خواهید در آن‌ها جستجو شود. بیشتر از یک نوع را با کاراکتر خط عمودی `|` از هم جدا کنید.
 	+ text: `نیم‌روز` (required, string) - عبارت جستجو

### مثال [GET]
+ Response 200 (application/json)
    {
        "items": [
            {
            "text": "نیم‌روز",
            "count": 2
            }
        ]
    }

## محتواهای مشابه [/{index_name}/{types}/similars]
با دریافت اطلاعات مربوط به یک محتوا، شبیه‌ترین محتواها را به‌همراه میزان مشابهت هر یک از آن‌ها برمی‌گرداند. فقط واردکردن فیلد `Title‌` در بدنهٔ این درخواست اجباری است. بقیهٔ فیلدها اختیاری است. هرچه فیلدهای بیشتری وارد کنید نتایج جستجو دقیق‌تر می‌شود. همچنین فقط می‌توانید فیلدهای دارای مقادیر متنی را وارد کنید.

+ Parameters
 	+ index_name: `baaz` (required, string) - شناسهٔ ایندکسی که می‌خواهید در آن جستجو شود.
 	+ types: `movie|person` (required, string) - انواعی که می‌خواهید در آن‌ها جستجو شود. بیشتر از یک نوع را با کاراکتر خط عمودی `|` از هم جدا کنید.

### مثال [POST]
+ Request (application/json)
 	+ Headers
 	 	 	Authorization: Token TOKEN_KEY
 	+ Body
 	 	 	{
 	 	 	 	"title": "پرویز"
 	 	 	}
+ Response 200 (application/json)
    {
        "items": [
            {
            "title": "پرویز",
            "similarity": 100,
            ...
            },
            ...
        ]
    }

## محتواهای منبع [/{index_name}/{types}/sources]
با دریافت اطلاعات مربوط به یک محتوا، منابعی را که این محتوا با استفاده از آنها درست شده می‌یابد و میزان تشابه را برای هر بخش مشخص می‌کند.

+ Parameters
 	+ index_name: `baaz` (required, string) - شناسه ایندکس.
 	+ types: `movie` (required, string) - فهرست نوع محتواها که با کاراکتر خط عمودی | به هم متصل شده‌اند.

### مثال [POST]
+ Request (application/json)
 	+ Headers
 	 	    Authorization: Token TOKEN_KEY
 	+ Attributes
            - doc: None (json) - فایل json شامل سند مورد نظر برای مشابهت‌یابی.
            - expires: 3600 (number) - حداکثر میزان زمانی که برای انجام عملیات مشابهت‌یابی در سرور یاز صرف می‌شود. این زمان به ثانیه است و اگر تا این زمان فرآیند مشابهت‌یابی پایان نیابد سرور با خطای 504 timeout پاسخ می‌دهد.
            - topn: 10 (number) - تعداد نتایجی که برای هر جستجو در یافتن منبع دریافت می‌شود. هر قدر این تعداد بالاتر باشد فرآیند مشابهت‌یابی دقیق‌تر بوده اما زمان بیشتری صرف می‌شود.
            - exact: false (boolean) - اگر این ویژگی فعال باشد تنها موارد کاملا یکسان استخراج می‌شوند.
            - method: paragrphs (string) - در این ویژگی روش تقطیع متن مورد سوال برای مشابهت یابی انتخاب می‌شود. در حال پیش‌فرض روش paragraphs استفاده می‌شود که در این روش هر پاراگراف به صورت مستقل مورد جستجو قرار می‌گیرد.
            در روش windows پنجره‌ای از کلمات با اندازه window_size مشخص شده و هر بار کلمات این پنجره جستجو می‌شود. این پنجره بعد از هر جستجو به اندازه step_size روی متن حرکت کرده و بخش بعدی را برای جستجو می‌سازد.
            در روش All کل محتوای متنی مورد نظر به صورت یکجا برای جستجو ارسال می‌شود.
            - min_query_tokens: 50 (number) - این پارامتر در روش paragraphs کاربرد دارد و نشان‌گر حداقل تعداد کلماتی است که برای یک پاراگراف در نظر گرفته می‌شود. اگر پاراگرافی کوچک‌تر از این مقدار باشد با پاراگراف بعدی ادغام می‌شود.
            - window_size: 100 (number) - این پارامتر در روش windows کاربرد دارد و نشان‌گر طول پنجره کلمات است. در واقع این عدد تعدا کلمات پنجره را مشخص می‌کند.
            - step_size: 10 (number) - این پارامتر در روش windows کاربرد دارد و نشان‌گر تعداد کلماتی است که در هر مرحله از جستجو پنجره کلمات به جلو حرکت می‌کند.
            - wait: true (boolean) - اگر این ویژگی فعال باشد بعد درخواست منتظر پایان فرآیند می‌ماند و پس از پایان فرآیند نتیجه ارسال می‌شود. اگر این ویژگی فعال نباشد، تا قبل از پایان فرآیند مشابهت‌یابی سامانه در پاسخ شناسه فرآیند در سرور و همچنین وضعیت فرآیند را ارسال می‌کند. در درخواست‌های بعدی با استفاده از این شناسه امکان اطلاع از وضعیت فرآیند مهیا است. نتیجه فرآیند مشابهت‌یابی در اولین درخواست پس از پایان فرآیند، ارسال می‌شود.
            - task_id: None (string) - اگر ویژگی wait غیر فعال باشد، سامانه در پاسخ به اولین درخواست شناسه فرآیند را ارسال می‌کند. با ارسال این شناسه، در پاسخ اگر فرآیند تمام شده باشد، نتیجه ارسال شده و در غیر این صورت وضعیت فرآیند ارسال می‌شود.
 	+ Body
 	 	 	{
 	 	 	  "doc": {"description": "شهر موشها فیلم سینمایی عروسکی تولیدی سال ۱۳۶۴ به کارگردانی سینمایی محمدعلی طالبی و کارگردانی عروسکی مرضیه برومند است. این فیلم سینمایی برای ردهٔ سنی کودکان ساخته شده و عروسک‌های بازیگر آن قبلاً در سریال تلویزیونی مدرسه موش‌ها ایفای نقش کرده بودند."},  	 	   
 	 	 	}
+ Response 200 (application/json)
    {
        "items": [
            {
            "similarity": 100,
            "src_link": "/baaz/movie/view?id=3",
            "src_title": "شهر موشها",
            "susp_from": 0,
            "susp_to": 247,
            "src_from": 0,
            "src_to": 247,
            "src_text": "شهر موشها فیلم سینمایی عروسکی تولیدی سال ۱۳۶۴ به کارگردانی سینمایی محمدعلی طالبی و کارگردانی عروسکی مرضیه برومند است. این فیلم سینمایی برای ردهٔ سنی کودکان ساخته شده و عروسک‌های بازیگر آن قبلاً در سریال تلویزیونی مدرسه موش‌ها ایفای نقش کرده بودند."
            }
        ]
    }

## ‌عبارات کلیدی [/{index_name}/{types}/{field}/keyterms]
عبارات کلیدیِ یک متن را استخراج می‌کند. این عبارات در هر ایندکس ممکن است متفاوت باشد. در واقع، برای یک متن واحد، بسته به اینکه در درخواست خود شناسهٔ کدام ایندکس را وارد کرده‌اید ممکن است نتایج متفاوتی دریافت کنید.
+ Parameters
 	+ index_name: `baaz` (required, string) - شناسهٔ ایندکسی که می‌خواهید در آن جستجو شود.
 	+ types: `movie|person` (required, string) - انواعی که می‌خواهید در آن‌ها جستجو شود. بیشتر از یک نوع را با کاراکتر خط عمودی `|` از هم جدا کنید.
 	+ text: `نیم‌روز` (required, string) - عبارت جستجو
 	+ field: `title` (optional, string) - فیلدی که محتوای متنی در آن ذخیره شده است.

### مثال: درخواست با متنِ محتوا [POST]
+ Request (application/json)
 	+ Headers
 	 	 	Authorization: Token TOKEN_KEY
 	+ Attributes
 	 	 	- text: None (required, string) - متنی که می‌خواهید عبارات کلیدی آن استخراج شود.
 	 	 	- topn: 10 (number) - تعداد عباراتی که می‌خواهید در پاسخ برگردانده شود.
 	+ Body
 	 	 	{
 	 	 	  "text": "شهر موشها فیلم سینمایی عروسکی تولیدی سال ۱۳۶۴ به کارگردانی سینمایی محمدعلی طالبی و کارگردانی عروسکی مرضیه برومند است. این فیلم سینمایی برای ردهٔ سنی کودکان ساخته شده و عروسک‌های بازیگر آن قبلاً در سریال تلویزیونی مدرسه موش‌ها ایفای نقش کرده بودند.",
 	 	 	  "topn": 5  	 	 
 	 	 	}
+ Response 200 (application/json)
    {
      "text": "شهر موشها فیلم سینمایی عروسکی تولیدی سال ۱۳۶۴ به کارگردانی سینمایی محمدعلی طالبی و کارگردانی عروسکی مرضیه برومند است. این فیلم سینمایی برای ردهٔ سنی کودکان ساخته شده و عروسک‌های بازیگر آن قبلاً در سریال تلویزیونی مدرسه موش‌ها ایفای نقش کرده بودند.",
      "items": [
        [
          "شهر موشها",
          0.02682
        ],
        [
          "سال ۱۳۶۴",
          0.03944
        ],
        [
          "محمدعلی طالبی",
          0.03944
        ],
        [
          "مرضیه برومند",
          0.03944
        ],
        [
          "فیلم سینمایی",
          0.07857
        ]
      ]
    }

## مثال: درخواست با شناسهٔ محتوا [GET]
+ Request (application/json)
 	+ Headers
 	 	 	Authorization: Token TOKEN_KEY
 	+ Attributes
 	 	 	- id:  (required, string) - شناسه محتوایی که می‌خواهید عبارات کلیدی آن استخراج شود.
 	 	 	- topn: 10 (number) - تعداد عباراتی که می‌خواهید در پاسخ برگردانده شود.
 	+ Body
 	 	 	{
 	 	 	  "id": 3,
 	 	 	  "topn": 5  	 	 
 	 	 	}
+ Response 200 (application/json)
    {
      "text": "شهر موشها فیلم سینمایی عروسکی تولیدی سال ۱۳۶۴ به کارگردانی سینمایی محمدعلی طالبی و کارگردانی عروسکی مرضیه برومند است. این فیلم سینمایی برای ردهٔ سنی کودکان ساخته شده و عروسک‌های بازیگر آن قبلاً در سریال تلویزیونی مدرسه موش‌ها ایفای نقش کرده بودند.",
      "items": [
        [
          "شهر موشها",
          0.02682
        ],
        [
          "سال ۱۳۶۴",
          0.03944
        ],
        [
          "محمدعلی طالبی",
          0.03944
        ],
        [
          "مرضیه برومند",
          0.03944
        ],
        [
          "فیلم سینمایی",
          0.07857
        ]
      ]
    }

##  دریافت آمار ایندکس [/{index_name}/{types}/stats]
برای دریافت آمار مربوط به `types` از یک ایندکس خاص کافی است درخواست خود را با متد GET به این تابع ارسال کنید. همچنین اگر پارامتر `types` را وارد نکنید، آمار مربوط به تمامی `types` های ایندکس داده میشود. در پاسخ بازگشتی `docs_number`تعداد اسناد روی ایندکس، `index_size `اندازهٔ ایندکس روی دیسک به بایت، `indexing_doc`تعداد سندهای درحال ایندکس‌شدن و `search_queries`تعداد کل جستجوهای انجام‌شده روی ایندکس موردنظر را نشان می‌دهد.
+ Parameters
    + index_name: (required, string) - شناسهٔ ایندکس.
    + types: (required, string) - انواعی که میخواهید آمار آنها را دریافت کنید.

### مثال [GET]
خروجی مقابل در پاسخ به این درخواست است:

`http://api.sobhe.ir:7000/index1/movie/stats`

پاسخ این درخواست شامل آمار زیر درباره ی `index1` در نوع `movie` است.

+ Response 200 (application/json)
    {
        "docs_number": 2,
        "index_size": 0,
        "indexing_doc": 0,
        "search_queries": 0
    }

## بررسی وضعیت سلامت ای‌پی‌آی [/api/healthcheck]

وضعیت سلامت ای‌پی‌آی را بررسی می‌کند. در صورتی که سالم باشد پاسخی با کد `۲۰۰` و متن `Server is up and ready` برمی‌گردد. 

### مثال [GET]

+ Request باز (application/json)
    + Headers

            Authorization: Token {your_api_token}        

+ Response 200 (application/json)
    + Body

            {
                "status": "ok",
                "message": "Server is up and ready"
            }
